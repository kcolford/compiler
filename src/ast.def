autogen definitions ast;

/* This is the definition file for the AST.

Copyright (C) 2014 Kieran Colford

This file is part of Mongoose.

Mongoose is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

Mongoose is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with Mongoose; see the file COPYING.  If not see
<http://www.gnu.org/licenses/>.*/

added_code = "
#include \"loc.h\"
#include <stddef.h>

#define USE_REFCOUNT 0
";

top_level = {
  type = "enum ast_code";
  call = type;
  doc = "The type of this AST.";
};

top_level = {
  type = "struct loc *";
  call = loc;
  doc = "The location of this AST's return value.";
};

top_level = {
  type = unsigned;
  call = throw_away;
  size = 1;
  doc = "Whether or not to throw away the return value for this AST.";
};

top_level = {
  type = unsigned;
  call = unary_prefix;
  size = 1;
  doc = "Whether this unary operator is prefix op.";
};

top_level = {
  type = unsigned;
  call = boolean_not;
  size = 1;
  doc = "Whether this boolean expression has a NOT applied to it.";
};

top_level = {
  type = unsigned;
  call = noreturnint;
  size = 1;
  doc = "Whether this is a condtional that behaves as a jump instead of a branch.";
};

top_level = {
  type = unsigned;
  call = static_decl;
  size = 1;
  doc = "Whether this is a declaration made with the static keyword.";
};

top_level = {
  type = unsigned;
  call = refs;
  size = 32;
  doc = "The reference count of this structure.";
};

top_level = {
  type = "struct ast *";
  call = next;
  doc = "The next AST to go to after this one.";
};

types = {
  name = block;
  sub = val;
  doc = "One level of boxing that can be placed on an AST.";
};

types = {
  name = ret;
  sub = val;
  doc = "A return statement.";
};

types = {
  name = function;
  cont = {
    type = "char *";
    call = type;
    doc = "The return type of the function.";
  };
  cont = {
    type = "char *";
    call = name;
    doc = "The name of the function.";
  };
  sub = args;
  sub = body;
  doc = "A function declaration.";
};

types = {
  name = cond;
  cont = {
    type = "char *";
    call = name;
    doc = "The branch to jump to.";
  };
  sub = cond;
  doc = "A conditional goto.";
};

types = {
  name = label;
  cont = {
    type = "char *";
    call = name;
    doc = "The name of the label.";
  };
  doc = "A label for a goto.";
};

types = {
  name = jump;
  cont = {
    type = "char *";
    call = name;
    doc = "The target of this unconditional jump.";
  };
  doc = "An unconditional jump.";
};

types = {
  name = integer;
  cont = {
    type = "long long";
    call = i;
    doc = "The value that this integer represents.";
  };
  doc = "An integer literal.";
};

types = {
  name = string;
  cont = {
    type = "char *";
    call = val;
    doc = "The value that this string literal represents.";
  };
  doc = "A string literal.";
};

types = {
  name = variable;
  cont = {
    type = "char *";
    call = type;
    doc = "The type of this variable.";
  };
  cont = {
    type = "char *";
    call = name;
    doc = "The name of this variable.";
  };
  extra = {
    type = int;
    call = alloc;
    doc = "The amount of memory that was allocated for this variable.";
  };
  doc = "A variable.";
};

types = {
  name = binary;
  cont = {
    type = int;
    call = op;
    doc = "An integer representing an opcode.";
  };
  sub = left;
  sub = right;
  doc = "A binary operation.";
};

types = {
  name = unary;
  cont = {
    type = int;
    call = op;
    doc = "An integer representing an opcode.";
  };
  sub = arg;
  doc = "A unary operation.";
};

types = {
  name = function_call;
  sub = name;
  sub = args;
  doc = "A function call.";
};

types = {
  name = alloc;
  sub = amount;
  doc = "Allocate memory.";
};

types = {
  name = ternary;
  sub = cond;
  sub = val;
  sub = base;
  doc = "A conditional move.";
};

/*
Local Variables:
mode:c
End:
*/
